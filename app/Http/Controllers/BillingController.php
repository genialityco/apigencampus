<?php

namespace App\Http\Controllers;

use App\Billing;
use App\Payment;
use App\Plan;
use App\Account;
use App\User;
use Mail;
use Illuminate\Http\Request;
use App\Http\Resources\BillingResource;
use Log;
// Services
use App\evaLib\Services\BillingService;

/**
 * @group Billing
 *
 */
class BillingController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $Billings = Billing::all();
        return response()->json($Billings);
    }

    /**
     * _store_: Create new Billing.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     * @bodyParam user_id string required user related to Billing Example: 628fdc698b89a10b9d464793
     * @bodyParam plan_id string plan related to Billing Example: 628fdc698b89a10b9d464793
     * @bodyParam billing object with aditional properties {
     *  @bodyParam save boolean required to determinate if the user want to save the payment method
     *  @bodyParam reference_wompi string required api wompi provide
     *  @bodyParam reference_evius string required formated
     *  @bodyParam payment_method object with aditional properties{
     *      @bodyParam method_name string name of the method. Example: DEBIT CARD
     *      @bodyParam type string type of the method. Example: CARD (ONLY THIS OPTION)
     *      @bodyParam brand string brand of the method. Example: VISA
     *      @bodyParam last_four string last four numbers of credit card. Example: 1222
     *      @bodyParam card_holder string name of the owner. Example: CARLOS ZAPATA
     *      @bodyParam exp_month string expired month. Example: 06
     *      @bodyParam exp_year string expired year. Example: 2022
     *      @bodyParam id string generated by wompi. Example: 27069
     *      @bodyParam status string credt card status. Example: ACTIVE
     *      @bodyParam address object with aditional properties {
     *          @bodyParam full_name string person name. Example CARLOS FELIPE ZAPATA MURCIA         
     *          @bodyParam identification object {
     *              @bodyParam type string name of the type. Example PERSON || COMPANY
     *              @bodyParam value string value of identification. Example 1254854
     *          }
     *          @bodyParam prefix string country prefix. Example: 57
     *          @bodyParam phone_number string phone user. Example: 6584157
     *          @bodyParam email string email address. Example: user@evius.co
     *          @bodyParam country string . Example: colombia
     *          @bodyParam city string . Example: bogota
     *          @bodyParam region string . Example: cundinamarca
     *          @bodyParam address_line_1 string address user. Example: Principal
     *          @bodyParam address_line_2 string address user. Example: Trabajo
     *          @bodyParam postal_code string. Example: 18001
     *      }
     *      @bodyParam base_Value number cost without iva. Example: 18001
     *      @bodyParam tax number tax. Example: 0.19
     *      @bodyParam total number cost + iva. Example: 19540
     *      @bodyParam total_discount number if has discount. Example: 18001
     *      @bodyParam total_discount number if has discount. Example: 18001
     *      @bodyParam details array objects description of billing [{
     *      @bodyParam plan object {
     *          @bodyParam price number cost. Example 234
     *          @bodyParam amount number amount. Example 1
     *      }
     *      @bodyParam users object {
     *          @bodyParam price number cost. Example 234
     *          @bodyParam amount number amount. Example 1
     *      }
     *      }]
     *      @bodyParam cupon_id string cupon Example 12554
     *      @bodyParam suscription_type string Example MONTHLY || YEAR
     *      @bodyParam currency string Example USD
     *      @bodyParam action string Example RENEW
     *      @bodyParam status string Example PENDING
     *      
     *  }
     * } 
     */
    public function store(Request $request)
    {
        $request->validate([
            'user_id' => 'required|string',
            'billing' => 'required',
            'billing.save' => 'required',
            'billing.reference_wompi' => 'required',
            'billing.reference_evius' => 'required',
            'billing.billing_email' => 'required|email',
            'billing.start_date' => 'required',
            'billing.end_date' => 'required',
            'billing.payment_method' => 'required',
            'billing.payment_method.method_name' => 'required',
            'billing.payment_method.address' => 'required',
            'billing.payment_method.address.name' => 'required',
            //'billing.payment_method.address.last_name' => 'required',
            'billing.payment_method.address.billing_email' => 'required|email',
            'billing.base_value' => 'required',
            'billing.tax' => 'required',
            'billing.total' => 'required',
            'billing.details' => 'required',
            'billing.subscription_type' => 'required',
            'billing.currency' => 'required',
            'action' => 'required',
            'status' => 'required',
        ]);

        $data = $request->json()->all();
        //Validacion si es la compra de un plan nuevo u actualizacion
        //Validacion status FAILED PAY
        if ($data['status'] == 'APPROVED') {
            app('App\Http\Controllers\UserController')
                ->updatePlan($data['plan_id'], $data['user_id']);
        }

        //Validacion si el usuario desea guardar el metodo de pago
        $save = isset($data['billing']['save']) ? $data['billing']['save'] : null;

        if ($save) {
            $payment = app('App\Http\Controllers\PaymentController')
                ->createByBilling($data['billing']['payment_method'], $data['user_id']);//Llamada al controlador para crear el metodo de pago
	    
            unset($data['billing']['payment_method']);//Como el usuario guarda los datos, se borran en el billing
            $data['payment_id'] = json_decode(json_encode($payment))->original->_id;//se le relaciona el id del metodo recien creado

            //save new billing
            $billing_save = new Billing($data);
	    $billing_save->save();

            //Se valida si la factura tiene adicionales
            $addons = isset($data['billing']['details']) ? $data['billing']['details'] : null;
            $this::findAndCreateAddons($addons, $data['user_id'], $billing_save->_id, $billing_save['billing']['subscription_type']);

            return response()->json($billing_save, 201);
        }
        //Si no guarda el metodo de pago se guarda tal cual llega el billing e igual se comprueba si tiene adicionales
        $Billing = new Billing($data);
        $Billing->save();
        $addons = isset($data['billing']['details']) ? $data['billing']['details'] : null;
        $this::findAndCreateAddons($addons, $data['user_id'], $Billing->_id, $Billing['billing']['subscription_type']);


        return response()->json($Billing, 201);

    }

    public function storeTickets(Request $request)
    {
        $request->validate([
            'user_id' => 'required|string',
            'billing' => 'required',
            'billing.save' => 'required',
            'billing.reference_wompi' => 'required|string',
            'billing.reference_evius' => 'required|string',
            'billing.billing_email' => 'required|email',
            'billing.payment_method' => 'required',
            'billing.payment_method.type' => 'required|string',
            'billing.payment_method.brand' => 'required|string',
            'billing.payment_method.last_four' => 'required|string',
            'billing.payment_method.address' => 'required',
            'billing.payment_method.address.email' => 'required|email',
            'billing.payment_method.method_name' => 'required|string',
            'billing.base_value' => 'required|numeric',
            'billing.total' => 'required|numeric',
            'billing.tax' => 'required|numeric',
            'billing.currency' => 'required',
            'status' => 'required|string',
        ]);

        $data = $request->json()->all();
        
        $Billing = new Billing($data);
        $Billing->save();

        return response()->json($Billing, 201);
  
    }

    public function saveAutomaticPayment($billing)
    {
        if ($billing) {
            $new_billing = new Billing($billing);
            $new_billing->save();
            Log::debug("Nueva billing generada: " . $new_billing->_id);
            //validar el estatus para enviar correo
            $user = Account::findOrFail($billing['user_id']);
            if ($new_billing['status'] == 'APPROVED') {
                Mail::to($user->email)
                    ->send(new \App\Mail\PlanPurchase($billing, 'Se ha renovado tu suscripci贸n en Evius'));
                //generate notification
                app('App\Http\Controllers\NotificationController')
                ->addNotification('Se ha renovado tu suscripci贸n en Evius', $user->_id);
            }else{
                Mail::to($user->email)
                    ->send(new \App\Mail\PlanPurchase($billing, 'La renovacion de tu suscripci贸n a Evius ha fallado'));
                //generate notification
                app('App\Http\Controllers\NotificationController')
                ->addNotification('La renovacion de tu suscripci贸n a Evius ha fallado', $user->_id);
            }
            return response()->json($new_billing, 201);
        }
        return response()->json(['message'=> 'Billing doesnt exist'], 404);
    }

    /**
     * findAndCreateAddons_: search of Addons and create by user.
     * 
     * @urlParam details required  details
     * @urlParam user required  user_id
     *
     */

    public function findAndCreateAddons($details, $user_id, $billing_id, $subscription)
    {
        if (isset($details['users'])) { //En este momento solo hay adicional de usuarios
            app('App\Http\Controllers\AddonController')->createByBilling($details['users'], $user_id, $billing_id, $subscription);
        }
    }

    /**
     * BillingbyUser_: search of Billings by user.
     * 
     * @urlParam user required  user_id
     *
     */
    
    public function BillingbyUser(string $user_id)
    {
        return BillingResource::collection(
            Billing::where('user_id', $user_id)
                ->latest()
                ->paginate(config('app.page_size'))
        );
    }

    /**
     * Display the specified resource.
     *
     * @param  $name
     * @return \Illuminate\Http\Response
     */
    public function findByReference($reference)
    {
        $billing_evius = Billing::where('billing.reference_evius', $reference)->get();
        if (json_decode($billing_evius)==null) {
            return response()->json(['message'=>'There is not reference evius related to a billing']);
        }

        return $billing_evius;
    }

    public function updateByReference(Request $request, $reference)
    {
        $data = $request->json()->all();
        $billing_evius = Billing::where('billing.reference_evius', $reference)->get();
        if (isset($billing_evius) && $billing_evius[0]->status == "PENDING") {
            $this::validationStatus($billing_evius[0], $data['status']);
            $billing_evius[0]->fill($data);
            $billing_evius[0]->save();
            return response()->json($billing_evius[0]);
        }else{
            return response()->json(['message'=>'There is not reference evius related to a billing']);
        }
        
    }

    /**
     * _show_: display information about a specific Billing.
     * 
     * @authenticated
     * @urlParam Billing required id of the Billing you want to consult. Example: 6298cb08f8d427d2570e8382
     * @response{
     *   "_id": "6298cb08f8d427d2570e8382",
	 *   "message": "Test",
	 *   "status": "ACTIVE",
	 *   "user_id": "628fdc698b89a10b9d464793",
	 *   "updated_at": "2022-06-02 14:39:27",
	 *   "created_at": "2022-06-02 14:36:56"
     * }
     */
    public function show($Billing)
    {
        $Billing = Billing::findOrFail($Billing);

        return $Billing;
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Billing  $Billing
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $Billing)
    {
        $data = $request->json()->all();
        $billing  = Billing::findOrFail($Billing);

        if (isset($data['status'])) {
            $status = $data['status'];
            $this::validationStatus($billing, $status);
        }
        $billing->fill($data);
        $billing->save();

        return response()->json($billing);
    }

    public function validationStatus($billing, $status)
    {
        $user = Account::findOrFail($billing['user_id']);
        if ($status == 'APPROVED') {
            switch ($billing['action']) {
                case 'SUBSCRIPTION':
                    //Update user plan_id
                    app('App\Http\Controllers\UserController')
                        ->updatePlan($billing['plan_id'], $billing['user_id']);
                    //si tiene adicionales se actualizan
                    app('App\Http\Controllers\UserController')
                        ->updateAddons($billing);
                    Mail::to($user->email)
                        ->send(new \App\Mail\PlanPurchase($billing, 'Adquiriste una nueva suscripci贸n en Evius'));
                    //generate notification
                    app('App\Http\Controllers\NotificationController')
                        ->addNotification('Adquiriste una nueva suscripci贸n en Evius', $user->_id);
                    break;
                case 'RENEWAL':
                    //si tiene adicionales se actualizan
                    app('App\Http\Controllers\UserController')
                        ->updateAddons($billing);
                    Mail::to($user->email)
                        ->send(new \App\Mail\PlanPurchase($billing, 'Se ha renovado tu suscripci贸n en Evius'));
                    //generate notification
                    app('App\Http\Controllers\NotificationController')
                        ->addNotification('Se ha renovado tu suscripci贸n en Evius', $user->_id);
                    break;
                case 'ADDITIONAL':
                    //Update addons by user
                    app('App\Http\Controllers\UserController')
                        ->updateAddons($billing);
                    Mail::to($user->email)
                        ->send(new \App\Mail\PlanPurchase($billing, 'Adquiriste adicionales en tu plan de Evius'));
                    //generate notification
                    app('App\Http\Controllers\NotificationController')
                        ->addNotification('Adquiriste adicionales en tu plan de Evius', $user->_id);
                    break;
                default:
                    break;
            }
	  BillingService::generatePurchaseConsolidation($billing);
        }
    }

    /**
     * _destroy_: delete Billing and related data.
     * @authenticated
     * @urlParam Billing required id of the Billing to be eliminated
     * 
     */
    public function destroy($Billing)
    {
        $Billing = Billing::findOrFail($Billing);
        $Billing->delete();

        return response()->json([], 204);
    }
}
